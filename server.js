const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const PDFDocument = require("pdfkit");
const fs = require("fs");
const crypto = require("crypto");
const path = require("path");

const app = express();
const PORT = process.env.PORT || 5000;

// Middlewares
app.use(cors({
  origin: ['chrome-extension://*', 'http://localhost:*', 'https://localhost:*'],
  credentials: true
}));
app.use(bodyParser.json({ limit: '10mb' }));
app.use(bodyParser.urlencoded({ extended: true, limit: '10mb' }));

// Ensure the 'pdfs' folder exists
const pdfDir = path.join(__dirname, "pdfs");
if (!fs.existsSync(pdfDir)) {
  fs.mkdirSync(pdfDir, { recursive: true });
}

// Serve static files from views directory
app.use(express.static(path.join(__dirname, 'views')));

// Store PDF metadata in memory (in production, use a database)
let pdfMetadata = [];

// 🏥 Health check endpoint
app.get('/health', (req, res) => {
  res.status(200).json({ 
    status: 'online', 
    timestamp: new Date().toISOString(),
    version: '2.1.0'
  });
});

// 📥 POST: Convert text to PDF (matches HTML fetch call)
app.post("/convert", async (req, res) => {
  const { text, title = "Converted Text" } = req.body;

  // Validation
  if (!text || typeof text !== 'string' || text.trim().length === 0) {
    return res.status(400).json({ 
      error: "Text is required and cannot be empty" 
    });
  }

  if (text.length > 100000) {
    return res.status(400).json({ 
      error: "Text is too long. Maximum 100,000 characters allowed." 
    });
  }

  try {
    const uuid = crypto.randomUUID();
    const sanitizedTitle = title.replace(/[^a-z0-9\s\-_]/gi, '').trim() || 'converted_text';
    const filename = `${sanitizedTitle}_${uuid.substring(0, 8)}.pdf`;
    const filePath = path.join(pdfDir, filename);

    // Create PDF with enhanced formatting
    const doc = new PDFDocument({
      margin: 72, // 1 inch margins
      size: 'A4'
    });

    const writeStream = fs.createWriteStream(filePath);
    doc.pipe(writeStream);

    // Add title
    doc.fontSize(18)
       .font('Helvetica-Bold')
       .text(title, { align: 'center' })
       .moveDown(1);

    // Add timestamp
    doc.fontSize(10)
       .font('Helvetica')
       .fillColor('gray')
       .text(`Generated on: ${new Date().toLocaleString()}`, { align: 'right' })
       .moveDown(1.5)
       .fillColor('black');

    // Add content with proper formatting
    doc.fontSize(12)
       .font('Helvetica')
       .text(text.trim(), {
         align: 'justify',
         lineGap: 4
       });

    // Add footer
    const pageCount = doc.bufferedPageRange().count;
    for (let i = 0; i < pageCount; i++) {
      doc.switchToPage(i);
      doc.fontSize(8)
         .fillColor('gray')
         .text(
           `Page ${i + 1} of ${pageCount} | Generated by PDF Converter Pro`,
           72,
           doc.page.height - 50,
           { align: 'center' }
         );
    }

    doc.end();

    writeStream.on("close", async () => {
      try {
        const stats = await fs.promises.stat(filePath);
        
        // Store metadata
        const metadata = {
          id: uuid,
          filename: filename,
          title: title,
          originalText: text.substring(0, 200) + (text.length > 200 ? '...' : ''),
          createdAt: new Date().toISOString(),
          size: stats.size,
          wordCount: text.trim().split(/\s+/).length
        };
        
        pdfMetadata.unshift(metadata);
        // Keep only last 100 PDFs in memory
        if (pdfMetadata.length > 100) {
          pdfMetadata = pdfMetadata.slice(0, 100);
        }

        const fileContent = await fs.promises.readFile(filePath);
        
        res.setHeader("Content-Type", "application/pdf");
        res.setHeader("Content-Disposition", `attachment; filename="${filename}"`);
        res.setHeader("X-PDF-ID", uuid);
        res.setHeader("X-PDF-Title", title);
        res.send(fileContent);
        
        console.log(`✅ PDF generated: ${filename} (${stats.size} bytes)`);
        
      } catch (err) {
        console.error("Error reading PDF file:", err);
        res.status(500).json({ error: "Error reading generated PDF" });
      }
    });

    writeStream.on("error", (err) => {
      console.error("Error writing PDF file:", err);
      res.status(500).json({ error: "Error generating PDF" });
    });

  } catch (err) {
    console.error("Error generating PDF:", err);
    res.status(500).json({ error: "Internal server error while generating PDF" });
  }
});

// 📊 GET: Get PDF statistics
app.get("/api/stats", (req, res) => {
  fs.readdir(pdfDir, (err, files) => {
    if (err) {
      return res.status(500).json({ error: "Error reading PDF directory" });
    }

    const stats = {
      totalPDFs: files.length,
      recentPDFs: pdfMetadata.slice(0, 10),
      serverUptime: process.uptime(),
      memoryUsage: process.memoryUsage(),
      timestamp: new Date().toISOString()
    };

    res.json(stats);
  });
});

// 🌐 GET: Enhanced home route with modern UI
app.get("/", (req, res) => {
  fs.readdir(pdfDir, async (err, files) => {
    if (err) {
      console.error("Error reading PDF directory:", err);
      return res.status(500).send("Error reading PDF directory");
    }

    // Get file stats for each PDF
    let fileStats = [];
    for (const file of files) {
      try {
        const filePath = path.join(pdfDir, file);
        const stats = await fs.promises.stat(filePath);
        const metadata = pdfMetadata.find(m => m.filename === file);
        
        fileStats.push({
          name: file,
          size: stats.size,
          created: stats.birthtime,
          title: metadata?.title || 'Unknown',
          wordCount: metadata?.wordCount || 0
        });
      } catch (e) {
        console.error(`Error getting stats for ${file}:`, e);
      }
    }

    // Sort by creation date (newest first)
    fileStats.sort((a, b) => new Date(b.created) - new Date(a.created));

    const html = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PDF Converter Pro - Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        * { font-family: 'Inter', sans-serif; }
        .gradient-bg { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
        .glass-effect {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        .card-hover {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        .card-hover:hover {
            transform: translateY(-2px);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
        }
    </style>
</head>
<body class="gradient-bg min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <!-- Header -->
        <div class="glass-effect rounded-2xl p-6 mb-8">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <div class="w-12 h-12 bg-white bg-opacity-20 rounded-xl flex items-center justify-center">
                        <i class="fas fa-file-pdf text-white text-xl"></i>
                    </div>
                    <div>
                        <h1 class="text-white text-2xl font-bold">PDF Converter Pro</h1>
                        <p class="text-white text-opacity-70">Dashboard & File Manager</p>
                    </div>
                </div>
                <div class="text-right">
                    <div class="text-white text-sm">
                        <i class="fas fa-circle text-green-400 mr-2"></i>
                        Server Online
                    </div>
                    <div class="text-white text-opacity-70 text-xs mt-1">
                        ${fileStats.length} PDFs Generated
                    </div>
                </div>
            </div>
        </div>

        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div class="glass-effect rounded-xl p-4 text-center">
                <div class="text-3xl font-bold text-white">${fileStats.length}</div>
                <div class="text-white text-opacity-70 text-sm">Total PDFs</div>
            </div>
            <div class="glass-effect rounded-xl p-4 text-center">
                <div class="text-3xl font-bold text-white">${Math.round(fileStats.reduce((acc, f) => acc + f.size, 0) / 1024)} KB</div>
                <div class="text-white text-opacity-70 text-sm">Total Size</div>
            </div>
            <div class="glass-effect rounded-xl p-4 text-center">
                <div class="text-3xl font-bold text-white">${fileStats.reduce((acc, f) => acc + f.wordCount, 0)}</div>
                <div class="text-white text-opacity-70 text-sm">Words Processed</div>
            </div>
            <div class="glass-effect rounded-xl p-4 text-center">
                <div class="text-3xl font-bold text-white">${fileStats.filter(f => new Date() - new Date(f.created) < 86400000).length}</div>
                <div class="text-white text-opacity-70 text-sm">Today</div>
            </div>
        </div>

        <!-- PDF List -->
        <div class="glass-effect rounded-2xl p-6">
            <div class="flex items-center justify-between mb-6">
                <h2 class="text-white text-xl font-semibold flex items-center">
                    <i class="fas fa-list mr-3"></i>
                    Generated PDFs
                </h2>
                <button onclick="window.location.reload()" class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white px-4 py-2 rounded-lg transition-all">
                    <i class="fas fa-sync-alt mr-2"></i>
                    Refresh
                </button>
            </div>

            ${fileStats.length === 0 ? `
                <div class="text-center py-12">
                    <i class="fas fa-file-pdf text-white text-opacity-30 text-6xl mb-4"></i>
                    <h3 class="text-white text-xl mb-2">No PDFs Generated Yet</h3>
                    <p class="text-white text-opacity-70">Use the browser extension to convert text to PDF</p>
                </div>
            ` : `
                <div class="space-y-3 max-h-96 overflow-y-auto">
                    ${fileStats.map(file => `
                        <div class="bg-white bg-opacity-10 rounded-xl p-4 card-hover">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center space-x-4 flex-1 min-w-0">
                                    <div class="w-10 h-10 bg-red-500 bg-opacity-20 rounded-lg flex items-center justify-center flex-shrink-0">
                                        <i class="fas fa-file-pdf text-red-400"></i>
                                    </div>
                                    <div class="flex-1 min-w-0">
                                        <h4 class="text-white font-medium truncate">${file.title}</h4>
                                        <div class="flex items-center space-x-4 text-white text-opacity-70 text-sm">
                                            <span><i class="fas fa-calendar mr-1"></i>${new Date(file.created).toLocaleDateString()}</span>
                                            <span><i class="fas fa-weight mr-1"></i>${Math.round(file.size / 1024)} KB</span>
                                            ${file.wordCount > 0 ? `<span><i class="fas fa-file-word mr-1"></i>${file.wordCount} words</span>` : ''}
                                        </div>
                                    </div>
                                </div>
                                <div class="flex items-center space-x-2 flex-shrink-0">
                                    <a href="/pdfs/${file.name}" target="_blank" class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1.5 rounded-lg text-sm transition-all">
                                        <i class="fas fa-eye mr-1"></i>
                                        View
                                    </a>
                                    <a href="/pdfs/${file.name}" download class="bg-green-500 hover:bg-green-600 text-white px-3 py-1.5 rounded-lg text-sm transition-all">
                                        <i class="fas fa-download mr-1"></i>
                                        Download
                                    </a>
                                </div>
                            </div>
                        </div>
                    `).join('')}
                </div>
            `}
        </div>

        <!-- Footer -->
        <div class="text-center mt-8">
            <p class="text-white text-opacity-70 text-sm">
                Powered by PDF Converter Pro v2.1.0 | 
                <a href="#" class="text-white hover:text-opacity-100 transition-colors">Documentation</a>
            </p>
        </div>
    </div>
</body>
</html>`;

    res.send(html);
  });
});

// 📤 GET: Serve individual PDF file
app.get("/pdfs/:filename", (req, res) => {
  const { filename } = req.params;
  const filePath = path.join(pdfDir, filename);

  fs.access(filePath, fs.constants.R_OK, (err) => {
    if (err) {
      console.error("Error accessing PDF file:", err);
      return res.status(404).json({ error: "PDF not found" });
    }

    res.sendFile(filePath);
  });
});

// 🗑️ DELETE: Remove PDF file
app.delete("/api/pdfs/:filename", (req, res) => {
  const { filename } = req.params;
  const filePath = path.join(pdfDir, filename);

  fs.access(filePath, fs.constants.F_OK, (err) => {
    if (err) {
      return res.status(404).json({ error: "PDF not found" });
    }

    fs.unlink(filePath, (err) => {
      if (err) {
        console.error("Error deleting PDF:", err);
        return res.status(500).json({ error: "Error deleting PDF" });
      }

      // Remove from metadata
      pdfMetadata = pdfMetadata.filter(m => m.filename !== filename);
      
      res.json({ message: "PDF deleted successfully" });
      console.log(`🗑️ PDF deleted: ${filename}`);
    });
  });
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error('Unhandled error:', err);
  res.status(500).json({ error: 'Internal server error' });
});

// 404 handler
app.use((req, res) => {
  res.status(404).json({ error: 'Endpoint not found' });
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('🔄 Received SIGTERM, shutting down gracefully...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('🔄 Received SIGINT, shutting down gracefully...');
  process.exit(0);
});

// Start server
app.listen(PORT, () => {
  console.log(`✅ PDF Converter Pro Server running at http://localhost:${PORT}`);
  console.log(`📁 PDF Directory: ${pdfDir}`);
  console.log(`🚀 Server started at ${new Date().toISOString()}`);
});

module.exports = app;